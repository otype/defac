package de.otype.android.defac.datacollect.services;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.util.Log;

public class RubyService extends Service {

	private static final String TAG 		= "RubyService";
	private final static String RBPIDFILE 	= "/sdcard/def/PID";
	public static boolean serviceIsRunning 	= false;

	private String defExecutable;
	private String rubyExecutable;	
	private RubyRunnable rr;
	private ControlLoopRunnable clr;

	@Override
	public IBinder onBind(Intent arg0) {
		return null;
	}

	@Override
	public void onStart(Intent intent, int startId) {
		serviceIsRunning = true;
		defExecutable = intent.getStringExtra("RubyScript");
		rubyExecutable = intent.getStringExtra("PathToRuby");		
		startControlLoop();
	}

	/**
	 * 
	 */
	public void startRubyScript() {
		Log.d(TAG, "Starting new Ruby Collector thread");
		rr = new RubyRunnable();
		new Thread(rr).start();
	}

	/**
	 * 
	 */
	public void startControlLoop() {
		Log.d(TAG, "Starting new Control Loop thread");
		clr = new ControlLoopRunnable();
		new Thread(clr).start();
	}

	@Override
	public void onDestroy() {
		Log.d(TAG, "Destroying Ruby Collector Thread");
		try {
//			rr.stop();
			new Thread(rr).stop();
		} catch (NullPointerException npe) {
			Log.e(TAG, "Could not stop Ruby Collector Thread ... ignoring!");
		}
		
		Log.d(TAG, "Destroying Control Loop Thread");
		try {
//			clr.stop();
			new Thread(clr).stop();
		} catch (NullPointerException npe) {
			Log.e(TAG, "Could not stop Control Loop Thread ... ignoring!");
		}
		
		Log.d(TAG, "Stopping Service");
		super.onDestroy();
	}

	
	/**
	 * Starts a thread which starts the Ruby Collector
	 * @author hgschmidt
	 *
	 */
	private class RubyRunnable implements Runnable {
		private Runtime rt;
		private Process prcs;

		public void run() {
			try {
				rt = Runtime.getRuntime(); 
				String cmd = rubyExecutable + " " + defExecutable + " start";
				prcs = rt.exec(cmd);
			} catch (IOException e) {
				Log.e(TAG, e.getMessage());
			}
		}

		public void stop() {
//			Log.i(TAG, "Stopping Ruby Collector with PID = " + RubyService.getPIDFileContent());
//			android.os.Process.sendSignal(RubyService.getPIDFileContent(), 2);
			Log.i(TAG, "Stopping DEF Collector");
			try {
				rt = Runtime.getRuntime(); 
				String cmd = rubyExecutable + " " + defExecutable + " stop";
				prcs = rt.exec(cmd);				
			} catch (IOException e) {
				Log.e(TAG, e.getMessage());
			}
		}		
	}

	
	/**
	 * 
	 * @author hgschmidt
	 *
	 */
	private class ControlLoopRunnable implements Runnable {
		public void run() {
			Log.d(TAG, "New Control Loop thread established");
			while (true) {				
				if (!RubyService.pidExists(rubyExecutable)) {					
					Log.d(TAG, "Starting Ruby Collector thread");					
					rr = new RubyRunnable();										
					new Thread(rr).start();
				}

				try {
					Log.d(TAG, "Going to sleep for 30s");
					Thread.sleep(30000);					
					Log.d(TAG, "Woke up again");
				} catch (InterruptedException ie) {						
					Log.e(TAG, ie.getMessage());
				}
			}
		}

		public void stop() {
			Log.i(TAG, "Stopping Control Loop Thread");
		}		
	}

	/**
	 * Read PID from Ruby Collector PID file
	 * @return PID of running Ruby Collector
	 */
//	private static int getPIDFileContent() {
//		File pidFile = new File(RBPIDFILE);		
//		try {
//			BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(pidFile)));
//			return Integer.parseInt(br.readLine());
//		} catch (FileNotFoundException fne) {
//			Log.e(TAG, fne.getMessage());
//		} catch (IOException ioe) {
//			Log.e(TAG, ioe.getMessage());			
//		}		
//		return -1;
//	}

	/**
	 * 
	 * @param processName
	 * @return
	 */
	private static boolean pidExists(String processName) {		
		Runtime rt = Runtime.getRuntime();
		String line = null;		

		try {
			Process p = rt.exec("/system/bin/ps");
			BufferedReader bfr = new BufferedReader(new InputStreamReader(p.getInputStream()), 8);
			while ((line = bfr.readLine()) != null) {								
				if (line.contains(processName)) {					
					return true;
				}
			}			
		} catch (IOException e) {			
			Log.d(TAG, e.getMessage());
		}				
		return false;
	}

}
